//
// Created by E on 11/7/16.
//

#include <stdio.h>
#include <stdlib.h>
#include "Graph.h"

int main(int argc, char* argv[]) {
	FILE *in, *out;
	in = fopen(argv[1], "r");
	out = fopen(argv[2], "w");

	int order;
	fscanf(in, "%d", &order);
	Graph G = newGraph(order);

	int vertex, adj;
	fscanf(in, "%d %d", &vertex, &adj);
	while (!(vertex == 0 && adj == 0)) {
		addEdge(G, vertex, adj);
		fscanf(in, "%d %d", &vertex, &adj);
	}

	printGraph(out, G);

	List L = newList();
	// read all the lines of the input file
	while (fscanf(in, "%d %d", &vertex, &adj)) {
		if (vertex == 0 && adj == 0) {
			break;
		}
		BFS(G, source);
		getPath(L, G, vertex);
		if (length(L) == 0) {
			fprintf(out, "\nThe distance from %d to %d is infinity\n", vertex,
					adj);
			fprintf(out, "No %d-%d path exists\n", vertex, adj);
		} else {
			fprintf(out, "\nThe distance from %d to %d is %d\n", vertex, adj,
					getDist(G, adj));
			fprintf(out, "A shortest %d-%d path is: ", vertex, adj);
			printList(out, L);
			fprintf(out, "\n");
		}
		clear(L);
	}

	//free the memory! no memory leaks !
	freeGraph(&G);
	freeList(&L);
	fclose(in);
	fclose(out);
}
