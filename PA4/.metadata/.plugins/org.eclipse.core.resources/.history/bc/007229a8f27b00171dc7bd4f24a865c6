/*
 * Graph.c
 *
 *  Created on: Aug 7, 2017
 *      Author: chend
 */

#include<stdio.h>
#include<stdlib.h>
#include "Graph.h"

#define WHITE 1
#define GRAY 2
#define BLACK 3

typedef struct GraphObj {
	List* adj;
	char* color;
	int* parent;
	int* distance;
	int order;
	int size;
	int source;
} GreaphObj;

/*** Constructors-Destructors ***/
Graph newGraph(int n) {
	Graph graph = malloc(sizeof(struct GraphObj));
	graph->adj = calloc(n + 1, sizeof(List));
	graph->color = calloc(n + 1, sizeof(int));
	graph->parent = calloc(n + 1, sizeof(int));
	graph->distance = calloc(n + 1, sizeof(int));
	graph->order = n;
	graph->size = 0;
	graph->source = NIL;

	for (int i = 1; i <= n; i++) {
		graph->adj[i] = newList();
		graph->color[i] = WHITE;
		graph->parent[i] = NIL;
		graph->distance[i] = INF;
	}
	return graph;;
}

void freeGraph(Graph* pG) {
	Graph temp = *pG;
	for (int i = 0; i < (*pG->order + 1); i++) {
		freeList(&(temp->adj[i]));
	}
	free(temp->adj);
	temp->adj = NULL;
	free(temp->color);
	temp->color = NULL;
	free(temp->parent);
	temp->parent = NULL;
	free(temp->distance);
	temp->distance = NULL;
	free(pG);
	+pG = NULL;
}

/*** Access functions ***/
int getOrder(Graph G) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else {
		return G->order;
	}
}

int getSize(Graph G) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else {
		return G->size;
	}
}

int getSource(Graph G) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else {
		return G->source;
	}
}

int getParent(Graph G, int u) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else if (u > (G->order) || u < 1) {
		fprintf(stderr, "Such vertex does not exist");
		exit(1);
	} else {
		return G->parent[u];
	}
}

int getDist(Graph G, int u) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else if (u > (G->order) || u < 1) {
		fprintf(stderr, "Such vertex does not exist");
		exit(1);
	} else {
		return G->distance[u];
	}
}

void getPath(List L, Graph G, int u) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else if (u > (G->order) || u < 1) {
		fprintf(stderr, "Such vertex does not exist");
		exit(1);
	} else if (G->source == NIL) {
		fprintf(stderr, "vertex called has NIL source");
	} else if (G->distance[u] == INF) {
		return;
	} else {
		if (G->source == u) {
			append(L, u);
		} else {
			getPath(L, G, G->parent[u]);
			append(L, u);
		}
	}
}

/*** Manipulation procedures ***/
void makeNull(Graph G) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else {
		for (int i = 0; i <= (G->order); i++) {
			clear(G->adj[i]);
		}
		G->size = 0;
	}
}

void addEdge(Graph G, int u, int v) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else if (u > (G->order) || u < 1) {
		if (v > (G->order) || v < 1) {
			fprintf(stderr, "Such vertex does not exist");
			exit(1);
		}
	} else {
		addArc(G, u, v);
		addArc(G, v, u);
		G->size--;
	}
}

void addArc(Graph G, int u, int v) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else if (u > (G->order) || u < 1) {
		if (v > (G->order) || v < 1) {
			fprintf(stderr, "Such vertex does not exist");
			exit(1);
		}
	} else {
		moveFront(G->adj[u]);
		while (index(G->adj[u]) > -1 && v > get(G->adj[u])) {
			moveNext(G->adj[u]);
		}
		if (index(G->adj[u]) == -1) {
			append(G->adj[u], v);
		} else {
			insertBefore(G->adj[u], v);
		}
		G->size++;
	}
}

void BFS(Graph G, int s) {
	for (int i = 0; i < (G->order + 1); ++i) {
		G->color[i] = WHITE;
		G->distance[i] = INF;
		G->parent[i] = NIL;
	}
	G->source = s;
	G->color[s] = GRAY;
	G->distance[s] = 0;
	G->parent[s] = NIL;
	List Q = newList();
	prepend(Q, s);
	while (length(Q) > 0) {
		int temp = back(Q);
		deleteBack(Q);
		moveFront(G->adj[temp]);
		while (index(G->adj[temp]) > -1) {
			int y = get(G->adj[temp]);
			if (G->color[y] == WHITE) {
				G->color[y] = GRAY;
				G->distance[y] = G->distance[temp] + 1;
				G->parent[y] = temp;
				prepend(Q, y);
			}
			moveNext(G->adj[temp]);
		}
	}
	freeList(&Q);
}

/*** Other operations ***/
void printGraph(FILE* out, Graph G) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else {
		for (int i = 1; i <= G->order; i++) {
			fprintf(out, "%d:", i);
			printList(out, G->adj[i]);
			fprintf(out, "\n");
		}
	}
}
