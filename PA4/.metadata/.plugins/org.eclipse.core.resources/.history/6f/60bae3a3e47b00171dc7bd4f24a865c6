/*
 * Graph.c
 *
 *  Created on: Aug 7, 2017
 *      Author: chend
 */

#include<stdio.h>
#include<stdlib.h>
#include "Graph.h"

#define WHITE 1
#define GRAY 2
#define BLACK 3

typedef struct GraphObj {
	List* adj;
	char* color;
	int* parent;
	int* distance;
	int order;
	int size;
	int source;
} GreaphObj;

/*** Constructors-Destructors ***/
Graph newGraph(int n) {
	Graph graph = malloc(sizeof(struct GraphObj));
	graph->adj = calloc(n + 1, sizeof(List));
	graph->color = calloc(n + 1, sizeof(int));
	graph->parent = calloc(n + 1, sizeof(int));
	graph->distance = calloc(n + 1, sizeof(int));
	graph->order = n;
	graph->size = 0;
	graph->source = NIL;

	for (int i = 1; i <= n; i++) {
		graph->adj[i] = newList();
		graph->color[i] = WHITE;
		graph->parent[i] = NIL;
		graph->distance[i] = INF;
	}
	return graph;;
}

void freeGraph(Graph* pG) {
	for (int i = 0; i < (*pG->order + 1); i++) {
		freeList(&(*pG->adj[i]));
	}
	free(*pG->adj);
	*pG->adj = NULL;
	free(*pG->color);
	*pG->color = NULL;
	free(*pG->parent);
	*pG->parent = NULL;
	free(*pG->distance);
	*pG->distance = NULL;
	free(*pG);
	*pG = NULL;
}

/*** Access functions ***/
int getOrder(Graph G) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else {
		return G->order;
	}
}

int getSize(Graph G) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else {
		return G->size;
	}
}

int getSource(Graph G) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else {
		return G->source;
	}
}

int getParent(Graph G, int u) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else if (u > (G->order) || G < 1) {
		fprintf(stderr, "Such vertex does not exist");
		exit(1);
	} else {
		return G->parent[u];
	}
}

int getDist(Graph G, int u) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else if (u > (G->order) || G < 1) {
		fprintf(stderr, "Such vertex does not exist");
		exit(1);
	} else {
		return G->distance[u];
	}
}

void getPath(List L, Graph G, int u) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else if (u > (G->order) || G < 1) {
		fprintf(stderr, "Such vertex does not exist");
		exit(1);
	} else if (G -> source == NIL) {
		fprintf(stderr, "vertex called has NIL source");
	} else if (G -> distance[u] == INF) {
		return;
	} else {
		if (G -> source == u) {
			append(L, u);
		} else {
			getPath(L, G, G->parent[u]);
			append(L, u);
		}
	}
}
/*** Manipulation procedures ***/
void makeNull(Graph G);
void addEdge(Graph G, int u, int v);
void addArc(Graph G, int u, int v);
void BFS(Graph G, int s);
/*** Other operations ***/
void printGraph(FILE* out, Graph G);
