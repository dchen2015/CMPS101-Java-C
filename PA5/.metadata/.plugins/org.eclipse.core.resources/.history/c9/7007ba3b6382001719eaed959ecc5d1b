//Katerina Chinnappan
//CruzID: kachinna
//PA 5

#include<stdlib.h>
#include<stdio.h>
#include<assert.h>

#include "Graph.h"


#define WHITE 0
#define GRAY 1
#define BLACK 2

typedef struct GraphObj {
	List* adj;
	char* color;
	int* parent;
	int* discover;
	int* finish;
	int order;
	int size;
	int time;

} GreaphObj;

/*** Constructors-Destructors ***/
Graph newGraph(int n) {
	Graph graph = malloc(sizeof(struct GraphObj));
	graph->adj = calloc(n + 1, sizeof(List));
	graph->color = calloc(n + 1, sizeof(int));
	graph->parent = calloc(n + 1, sizeof(int));
	graph->discover = calloc(n + 1, sizeof(int));
	graph->finish = calloc(n + 1, sizeof(int));
	graph->order = n;
	graph->size = 0;
	graph->time = UNDEF;

	for (int i = 1; i <= n; i++) {
		graph->adj[i] = newList();
		graph->color[i] = WHITE;
		graph->parent[i] = NIL;
		graph->discover[i] = UNDEF;
		graph->finish[i] = UNDEF;
	}
	return graph;
}

void freeGraph(Graph* pG) {
	for (int i = 1; i <= getOrder(*pG); i++) { //free each list in adj
		freeList(&(*pG)->adj[i]);
		free((*pG)->adj[i]);
	}
	free((*pG)->adj);
	free((*pG)->color);
	free((*pG)->discover);
	free((*pG)->finish);
	free((*pG)->parent);
	(*pG)->adj = NULL;
	(*pG)->color = NULL;
	(*pG)->parent = NULL;
	(*pG)->discover = NULL;
	(*pG)->finish = NULL; //free pointers

	free(*pG);
	*pG = NULL; //free graph
}

/*** Access functions ***/
int getOrder(Graph G) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else {
		return G->order;
	}
}

int getSize(Graph G) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else {
		return G->size;
	}
}

int getParent(Graph G, int u) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else if (u > (G->order) || u < 1) {
		fprintf(stderr, "Such vertex does not exist");
		exit(1);
	} else {
		return G->parent[u];
	}
}

int getDiscover(Graph G, int u) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else if (u > (G->order) || u < 1) {
		fprintf(stderr, "Such vertex does not exist");
		exit(1);
	} else {
		return G->discover[u];
	}
}

int getFinish(Graph G, int u) {
	if (G == NULL) {
		fprintf(stderr, "Graph is NULL");
		exit(1);
	} else if (u > (G->order) || u < 1) {
		fprintf(stderr, "Such vertex does not exist");
		exit(1);
	} else {
		return G->finish[u];
	}
}

// Adds an undirected edge to the Graph G from u to v
// Pre: 1 <= u <= getOrder(G), 1 <= v <= getOrder(G)
 void addEdge(Graph G, int u, int v) {
    if(G == NULL)
    {
        fprintf(stderr, "Invalid: cannot call addEdge(Graph G, int u, int v)");
        exit(1);
    }
    if(u < 1 || u > getOrder(G))
    {
        fprintf(stderr, "Invalid: cannot call addEdge(Graph G, int u, int v), out of bounds");
        exit(1);
    }
    if(v < 1 || v > getOrder(G))
    {
        fprintf(stderr, "Invalid: cannot call addEdge(Graph G, int u, int v), out of bounds");
        exit(1);
    }
    addArc(G, u, v);
    addArc(G, u, v);
    G->size--;
}

// Adds a directed edge to the Graph G from u to v
// Pre: 1 <= u <= getOrder(G), 1 <= v <= getOrder(G)
 void addArc(Graph G, int u, int v) {
     if(G == NULL)
    {
        fprintf(stderr, "Invalid: cannot call addArc(Graph G, int u, int v)");
        exit(1);
    }
    if(u < 1 || u > getOrder(G))
    {
        fprintf(stderr, "Invalid: cannot call addArc(Graph G, int u, int v), out of bounds");
        exit(1);
    }
    if(v < 1 || v > getOrder(G))
    {
        fprintf(stderr, "Invalid: cannot call addArc(Graph G, int u, int v), out of bounds");
        exit(1);
    }

    List L = G->adj[u];

    if(index(L) == -1)
    {
        append(L, v);
        G->size++;
        return;
    }
    moveFront(L);
    while(index(L) != -1)
    {
        if(v == get(L))
        {
            return;
        }
        if(v < get(L))
        {
            insertBefore(L, v);
            G->size++;
            return;
        }
        moveNext(L);
    }
    append(L, v);
    G->size++;


}

//helper for DFS()
 void DFS(Graph G, List S) { /* Pre: length(S)==getOrder(G) */
 	if (G == NULL) {
 		fprintf(stderr, "Graph is NULL");
 		exit(1);
 	} else if (length(S) != G->order) {
 		fprintf(stderr, "List is NULL");
 		exit(1);
 	}

 	for (int i = 1; i <= (G->order); i++) {
 		G->color[i] = WHITE;
 		G->discover[i] = UNDEF;
 		G->finish[i] = UNDEF;
 		G->parent[i] = NIL;
 	}

 	List temp = copyList(S);
 	clear(S);
 	G->time = 0;
 	moveFront(temp);
 	while (index(temp) > -1) {
 		if (G->color[get(temp)] == WHITE) {
 			visit(G, S, get(temp));
 		}
 		moveNext(temp);
 	}
 }

 void visit(Graph G, List S, int x) {
 	if (G == NULL) {
 		fprintf(stderr, "Graph is NULL");
 		exit(1);
 	}

 	G->color[x] = GRAY;
 	G->discover[x] = ++(G->time);
 	moveFront(G->adj[x]);
 	while (index(G->adj[x]) > -1) {
 		if (G->color[get(G->adj[x])] == WHITE) {
 			G->parent[get(G->adj[x])] = x;
 			visit(G, S, get(G->adj[x]));
 		}
 		moveNext(G->adj[x]);
 	}
 	G->finish[x] = ++(G->time);
 	G->color[x] = BLACK;
 	prepend(S, x);
 }

// Prints out the Graph by iterating over and printing out
// each adjacency list with the row number preceeding it.
 void printGraph(FILE* out, Graph G)
{
	if( G == NULL){
		printf("Graph Error: printGraph() called on a NULL graph reference");
		exit(1);
	}
   if( G==NULL )
   {
      printf("Graph Error: calling printGraph() on NULL Graph reference\n");
      exit(1);
   }
   int i;
	for(i = 1; i<=getOrder(G); i++)
	{
		fprintf(out,"%d: ",i);
		printList(out, G->adj[i]);
				fprintf(out, "\n");
	}
}

 Graph transpose(Graph G)
{
    if(G == NULL)
    {
        fprintf(stderr, "Invalid: cannot call transpose(Graph G)");
        exit(1);
    }
    Graph Transpose = newGraph(getOrder(G));

    int i;
    for(i = 1; i <= getOrder(G); i++)
    {
        moveFront(G->adj[i]);
        while(index(G->adj[i])>= 0)
            {
                addArc(Transpose, get(G->adj[i]), i);
                moveNext(G->adj[i]);
            }
    }
    return Transpose;
}

 Graph copyGraph(Graph G)
{
    if(G == NULL)
    {
        fprintf(stderr, "Invalid: cannot call copyGraph(Graph G)");
        exit(1);
    }

    Graph Copy = newGraph(getOrder(G));
    int i;
    for(i = 1; i <= getOrder(G); i++)
    {
        moveFront(G->adj[i]);

        while(index(G->adj[i]) >= 0)
        {
            addArc(Copy, i, get(G->adj[i]));
            moveNext(G->adj[i]);
        }
    }
    return Copy;
}
/*****extra from pa4*****/
/*void printPath(FILE* out, Graph G, int x, int y)
{
    int parent = getParent(G, y);

    if(y == x)
    {
        fprintf(out, "%d", x);
        fprintf(out, "\n");
    }
    else if(parent == NIL)
    {
        fprintf(out, "No %d-%d path exists\n", x, y);
    }
    else
    {
        printPath(out, G, x, parent);
        fprintf(out, "%d", y);
        fprintf(out, "\n");
    }
}*/
