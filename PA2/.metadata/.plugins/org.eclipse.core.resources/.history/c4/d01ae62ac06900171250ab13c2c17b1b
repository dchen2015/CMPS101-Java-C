/*
 * List.c
 *
 *  Created on: Jul 15, 2017
 *      Author: chend
 */

#include <stdlib.h>
#include <stdio.h>
#include "List.h"

typedef struct NodeObj {
	struct NodeObj* next;
	struct NodeObj* prev;
	int data;
} NodeObj;

typedef NodeObj* Node;

typedef struct ListObj {
	Node front;
	Node cursor;
	Node back;
	int index;
	int length;
} ListObj;

Node newNode(int data) {
    Node temp = malloc(sizeof(NodeObj));
    temp -> data = data;
    temp -> prev = NULL;
    temp -> next = NULL;
    return (temp);
}

void freeNode(Node *temp) {
    if (temp != NULL && *temp != NULL) {
        free(*temp);
        *temp = NULL;
    }
}

// Constructors-Destructors ----------------------------------------------------
List newList (void) {
	List temp = malloc(sizeof(ListObj));
	temp -> front = NULL;
	temp -> cursor = NULL;
	temp -> back = NULL;
	temp -> length = 0;
	temp -> index = -1;
	return temp;
}

void freeList (List* temp) {
	if (temp != NULL && *temp != NULL) {
		Node tempNode = (*temp) -> front;
		while (tempNode != NULL) {
			Node tempNode2 = tempNode;
			tempNode = tempNode -> next;
			free(tempNode2);
		}
		free(*temp);
		*temp = NULL;
	}
}


//Access Functions -----------------------------------------------------------
int length(List L) {
    return L -> length;
}

int index(List L) {
	if (L -> cursor != NULL) {
		return L -> index;
	} else {
		return -1;
	}
}

int front(List L) {
    if (L -> length > 0) {
        return L -> front -> data;
    } else {
    	printf("List Error: List is empty\n");
    	exit(1);
    }
}

int back(List L) {
    if (L -> length > 0) {
        return L -> back -> data;
    } else {
    	printf("List Error: List is empty\n");
    	exit(1);
    }
}

int get(List L) {
    if (L -> length < 1) {
    	printf("List Error: List is empty\n");
    	exit(1);
    } else
    if (L -> index < 0) {
    	printf("List Error: Undefined index\n");
		exit(1);
    } else
    return L -> cursor -> data;
}

int equals (List L1, List L2) {
	Node temp1 = L1 -> front;
	Node temp2 = L2 -> front;
	int equality = 1;

	if(L1 -> length == L2 -> length) {
		while (equality == 1 && temp1 != NULL && temp2 != NULL) {
			if (temp1 -> data != temp2 -> data) {
				equality = 0;
			}
			temp1 = temp1 -> next;
			temp2 = temp2 -> next;
		}
		return equality;
	}
	return 0;
}

// Manipulation procedures ----------------------------------------------------
void clear(List L) {
	if (L == NULL) {
		printf("List Error: List is Empty");
		exit(1);
	}
	Node tempNode = L -> front;
	while (tempNode != NULL) {
		Node tempNode2 = tempNode;
		tempNode = tempNode -> next;
		free(tempNode2);
	}
	L -> front = NULL;
	L -> back = NULL;
	L -> cursor = NULL;
	L -> length = 0;
	L -> index = -1;
}

void moveFront(List L) {
	if (L -> length > 0) {
		L -> cursor = L -> front;
		L -> index = 0;
	}
}

void moveBack(List L) {
	if (L -> length > 0) {
		L -> cursor = L -> back;
		L -> index = L -> length - 1;
	}
}

void movePrev(List L) {
	if (L -> cursor != NULL) {
		if (L -> index != 0) {
			L -> cursor = L -> cursor -> prev;
			L -> index --;
		} else {
			L -> cursor = NULL;
			L -> index = -1;
		}
	}
}

void moveNext(List L) {
	if (L -> cursor != NULL) {
		if (L -> index != L -> length - 1) {
			L -> cursor = L -> cursor -> next;
			L -> index ++;
		} else {
			L -> cursor = NULL;
			L -> index = -1;
		}
	}
}
void prepend(List L, int data) {
	Node temp = newNode (data);
	temp -> next = front;
	temp -> prev = NULL;
	if (L -> front != NULL) {
		L -> front -> prev = temp;
	} else {
		L -> back = temp;
	}
	L -> front = temp;
	L -> index ++;
	L -> length ++;
}

void append(List L, int data) {
	Node temp = newNode (data);
	temp -> next = NULL;
	temp -> prev = back;
	if (L -> back != NULL) {
		L -> back -> next = temp;
	} else {
		L -> front = temp;
	}
	L -> back = temp;
	L -> length ++;
}

void insertBefore(List L, int data) {
	if (L -> length > 0 && L -> index >= 0) {
		Node temp = newNode(data);
		temp -> next = L -> cursor;
		temp -> prev = L -> cursor -> prev;
		if (L -> cursor -> prev != NULL) {
			L -> cursor -> prev -> next = temp;
		} else {
			L -> front = temp;
		}
		L -> cursor -> prev = temp;
	}
	L -> index ++;
	L -> length ++;
}

void insertAfter(List L, int data) {
	if (L -> length > 0 && L -> index >= 0) {
		Node temp = newNode(data);
		temp -> next = L -> cursor -> next;
		temp -> prev = L -> cursor;
		if (L -> cursor -> next != NULL) {
			L -> cursor -> next -> prev = temp;
		} else {
			L -> back = temp;
		}
		L -> cursor -> next = temp;
	}
	L -> length ++;
}

void deleteFront(List L) {
	Node temp = L -> front;
	if (L -> cursor == L -> front) {
		L -> cursor = NULL;
		L -> index = -1;
	}
	if (L -> length > 1) {
		L -> front = L -> front -> next;
		L -> front -> prev = NULL;
	} else {
		L -> front = NULL;
		L -> back = NULL;
	}
	L -> length --;
	L -> index --;
	freeNode(&temp);
}

void deleteBack(List L) {
	Node temp = L -> back;
	if (L -> cursor == L -> back) {
		L -> cursor = NULL;
		L -> index = -1;
	}
	if (L -> length > 1) {
		L -> back = L -> back -> prev;
		L -> back -> next = NULL;
	} else {
		L -> front = NULL;
		L -> back = NULL;
	}
	L -> length --;
	freeNode(&temp);
}

void delete(List L) {
	Node temp = L -> cursor;
	if (L -> length > 0 && L -> index >= 0) {
		if (L -> cursor == L -> front) {
			deleteFront(L);
		} else
		if (L -> cursor == L -> back) {
			deleteBack(L);
		} else {
			L -> cursor -> prev -> next = L -> cursor -> next;
			L -> cursor -> next -> prev = L -> cursor -> prev;
			L -> cursor = NULL;
			length --;
			freeNode(&temp);
		}
	}
}

// Other operations -----------------------------------------------------------
void printList(FILE* out, List L) {
	for(Node i = L -> front; i != NULL; i = i -> next) {
		fprintf(out, "%d ", i -> data);
	}
}

List copyList(List L) {
	List copy = newList();
	Node temp = L -> front;
	while (temp != NULL) {
		append(copy, temp -> data);
		temp = temp -> next;
	}
	return copy;
}
