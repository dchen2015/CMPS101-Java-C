/*
 * List.c
 *
 *  Created on: Jul 15, 2017
 *      Author: chend
 */

#include <stdlib.h>
#include <stdio.h>
#include "List.h"

typedef struct NodeObj {
	struct NodeObj* next;
	struct NodeObj* prev;
	int data;
} NodeObj;

typedef NodeObj* Node;

typedef struct ListObj {
	Node front;
	Node cursor;
	Node back;
	int index;
	int length;
} ListObj;

Node newNode(int data) {
    Node temp = malloc(sizeof(NodeObj));
    temp -> data = data;
    temp -> prev = NULL;
    temp -> next = NULL;
    return (temp);
}

void freeNode(Node *temp) {
    if (temp != NULL && *temp != NULL) {
        free(*temp);
        *temp = NULL;
    }
}

// Constructors-Destructors ----------------------------------------------------
List newList (void) {
	List temp = malloc(sizeof(ListObj));
	temp -> front = NULL;
	temp -> cursor = NULL;
	temp -> back = NULL;
	temp -> length = 0;
	temp -> index = -1;
	return temp;
}

void freeList (List* temp) {
	if (temp != NULL && *temp != NULL) {
		Node tempNode = (*temp) -> front;
		while (tempNode != NULL) {
			Node tempNode2 = tempNode;
			tempNode = tempNode -> next;
			free(tempNode2);
		}
		free(*temp);
		*temp = NULL;
	}
}

/*
-   Access functions
*/
// Returns the number of elements in this List.
int length(List L) {
    return L -> length;
}

// If cursor is defined, returns the index of the cursor element,
// otherwise returns -1
int index(List L) {
	if (L -> cursor != NULL) {
		return L -> index;
	} else {
		return -1;
	}
}

int front(List L) {
    if (L -> length > 0) {
        return L -> front -> data;
    } else {
    	printf("List Error: List is empty\n");
    	exit(1);
    }
}

int back(List L) {
    if (L -> length > 0) {
        return L -> back -> data;
    } else {
    	printf("List Error: List is empty\n");
    	exit(1);
    }
}

int get(List L) {
    if (L -> length < 1) {
    	printf("List Error: List is empty\n");
    	exit(1);
    } else
    if (L -> index < 0) {
    	printf("List Error: Undefined index\n");
		exit(1);
    } else
    return L -> cursor -> data;
}

// Returns true if this List and L are the same integer sequence;
// the cursor is ignored in both lists.
int equals(List A, List B) {
    if(A == NULL || B == NULL) {
        fprintf(stderr, "List error: equals() called on null List reference ");
        fprintf(stderr, "One or more of your Lists may be null.\n");
        exit(1);
    }
    if(A->length != B->length) return 0;
    Node tmp1 = A->front;
    Node tmp2 = B->front;
    while(tmp1 != NULL && tmp2 != NULL) {
        if(tmp1->data != tmp2->data) return 0;
        else {
            tmp1 = tmp1->next;
            tmp2 = tmp2->next;
        }
    }
    return 1;
}

/*
-   Manipulation functions
*/
// Resets this List to its original empty state.
void clear(List L) {
	if (L == NULL) {
		printf("List Error: List is Empty");
		exit(1);
	}
	Node tempNode = L -> front;
	while (tempNode != NULL) {
		Node tempNode2 = tempNode;
		tempNode = tempNode -> next;
		free(tempNode2);
	}
	L -> front = NULL;
	L -> back = NULL;
	L -> cursor = NULL;
	L -> length = 0;
	L -> index = -1;
}

// If List is non-empty, places the cursor under the front element;
// otherwise does nothing.
void moveFront(List L) {
	if (L -> length > 0) {
		L -> cursor = L -> front;
		L -> index = 0;
	}
}

void moveBack(List L) {
	if (L -> length > 0) {
		L -> cursor = L -> back;
		L -> index = L -> length - 1;
	}
}

// If cursor is defined and not at front, moves cursor one step toward
// front of this List, if cursor is defined and at front, cursor becomes
// undefined, if cursor is undefined does nothing.
void movePrev(List L) {
	if (L -> cursor != NULL) {
		if (L -> index != 0) {
			L -> cursor = L -> cursor -> prev;
			L -> index --;
		} else {
			L -> cursor = NULL;
			L -> index = -1;
		}
	}
}

void moveNext(List L) {
	if (L -> cursor != NULL) {
		if (L -> index != L -> length - 1) {
			L -> cursor = L -> cursor -> next;
			L -> index ++;
		} else {
			L -> cursor = NULL;
			L -> index = -1;
		}
	}
}

// Insert new element into this List. If List is non-empty, insertion
// takes place before the front element.
void prepend(List L, int data) {
    Node tmp = newNode(data);
    tmp->next = L->front;
    tmp->prev = NULL;
    if(L->front == NULL)
        L->back = tmp;
    else
        L->front->prev = tmp;
    L->front = tmp;
    L->length++;
}

// Insert new element into this List. If List is non-empty, insertion
// takes place after the last element.
void append(List L, int data) {
    if(L == NULL) {
        fprintf(stderr, "List error: append() called on null List reference\n");
        exit(1);
    }
    Node tmp = newNode(data);
    tmp->prev = L->back;
    tmp->next = NULL;
    if(L->back == NULL)
        L->front = tmp;
    else
        L->back->next = tmp;
    L->back = tmp;
    L->length++;
}

// Insert new element before cursor (pre: length() > 0, index() > 0).
void insertBefore(List L, int data) {
    if(L == NULL) {
        fprintf(stderr, "List error: insertBefore() called on null List reference\n");
        exit(1);
    }
    if(L->length <= 0) {
        fprintf(stderr, "List error: insertBefore() called on empty List\n");
        exit(1);
    }
    if(L->cursor == NULL) {
        fprintf(stderr, "List error: insertBefore() called on undefined cursor\n");
        exit(1);
    }
    if(L->cursor == L->front) {
        prepend(L, data);
        return;
    }
    if(!(length(L) > 0 && index(L) >= 0)) return;
    Node tmp = newNode(data);
    tmp->prev = L->cursor->prev;
    tmp->next = L->cursor;
    if(L->cursor->prev != NULL)
        L->cursor->prev->next = tmp;
    else
        L->front = tmp;
    L->cursor->prev = tmp;
    L->length++;
}

// Insert new element after cursor (pre: length() > 0, index() > 0).
void insertAfter(List L, int data) {
    if(L == NULL) {
        fprintf(stderr, "List error: insertAfter() called on null List reference\n");
        exit(1);
    }
    if(L->length <= 0) {
        fprintf(stderr, "List error: insertAfter() called on empty List\n");
        exit(1);
    }
    if(L->cursor == NULL) {
        fprintf(stderr, "List error: insertAfter() called on undefined cursor\n");
        exit(1);
    }
    if(L->cursor == L->back) {
        append(L, data);
        return;
    }
    Node tmp = newNode(data);
    tmp->prev = L->cursor;
    tmp->next = L->cursor->next;
    if(L->cursor->next != NULL)
        L->cursor->next->prev = tmp;
    L->cursor->next = tmp;
    L->length++;
}

// Deletes the front element (pre: length() > 0).
void deleteFront(List L) {
    if(L == NULL) {
        fprintf(stderr, "List error: deleteFront() called on null List reference\n");
        exit(1);
    }
    if(L->length <= 0) {
        fprintf(stderr, "List error: deleteFront() called on empty List\n");
        exit(1);
    }
    Node tmp = L->front;
    if(length(L) > 1) L->front = L->front->next;
    else L->front = L->back = NULL;
    L->length--;
    freeNode(&tmp);
}

// Deletes the back element (pre: length() > 0).
void deleteBack(List L) {
    if(L == NULL) {
        fprintf(stderr, "List error: deleteBack() called on null List reference\n");
        exit(1);
    }
    if(L->length <= 0) {
        fprintf(stderr, "List error: deleteBack() called on empty List\n");
        exit(1);
    }
    if(L->cursor == L->back) {
        L->cursor = NULL;
        L->index = -1;
    }
    Node tmp = L->back;
    L->back = L->back->prev;
    L->back->next = NULL;
    L->length--;
    freeNode(&tmp);
}

// Deletes the cursor element, making cursor undefined (pre: length() > 0,
// index() > 0).
void delete(List L) {
    if(L == NULL) {
        fprintf(stderr, "List error: delete() called on null List reference\n");
        exit(1);
    }
    if(L->length <= 0) {
        fprintf(stderr, "List error: delete() called on empty List\n");
        exit(1);
    }
    if(L->cursor == NULL) {
        fprintf(stderr, "List error: delete() called on undefined cursor");
        exit(1);
    }
    if(L->cursor == L->back) {
        deleteBack(L);
        return;
    }
    else if(L->cursor == L->front) {
        deleteFront(L);
        return;
    }
    L->cursor->prev->next = L->cursor->next;
    L->cursor->next->prev = L->cursor->prev;
    L->cursor = NULL;
    L->index = -1;
    L->length--;
}

/*
-   Other methods
*/
// Overrides Object's toString method. Returns a String representation of
// this List consisting of a space separated sequence of integers, with
// front on the left.
void printList(FILE* out, List L) {
    if(L == NULL) {
        fprintf(stderr, "List error: printList() called on null List reference\n");
        exit(1);
    }
    Node tmp = L->front;
    int i = 0;
    while(tmp != NULL) {
        if(i != 0) fprintf(out, " %d", tmp->data);
        else fprintf(out, "%d", tmp->data);
        tmp = tmp->next;
        i++;
    }
}

// Returns a new List representing the same integer sequence as this List.
// The cursor in the new list is undefined, regardless of the state of the
// cursor in this List. The List is unchanged.
List copyList(List L) {
    List copiedList = newList();
    Node tmp = L->front;
    while(tmp != NULL) {
        append(copiedList, tmp->data);
        tmp = tmp->next;
    }
    return copiedList;
}
