/*
 * Lex.c
 *
 *  Created on: Jul 15, 2017
 *      Author: chend
 */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "List.h"

int main ( int args, char *argv[] ) {
	int lines = 0;
	FILE *in, *out;
	char line[255];


	in = fopen(argv[1], "read");
	out = fopen(argv[2], "write");

	if (args != 3) {
		printf ("Invalid input\n");
		exit(1);
	}

	while (fgets(line, 255, in) != NULL) {
		lines ++;
	}

	fclose(in);
	in = fopen(argv[1], "read");

	char** array = malloc(sizeof(char**) * lines);
	for(int i = 0; i < lines; i++){
		fgets(line, 255, in);

		char *f = malloc(strlen(line) + 1);
		if (f== NULL) {
			array[i] = f;
		}else{
			strcpy(f,line);
			array[i] = f;
		}
	}

	/*List list = newList();
	append(list, 0);
	for (int i = 1; i < length(list); i++) {
		int j = 0;
		moveBack(list);
		while (j < i && strcmp(array[i],array[get(list)]) <= 0) {
			j ++;
			movePrev(list);
		}
		if (index(list) != -1) {
			insertAfter(list, i);
		} else {
			prepend(list, i);
		}
	}*/

	List sorted = newList();
   append(sorted, 0);
   moveFront(sorted);

	//perform pseudo insert sort
	for( int j = 1; j<lines; j++){
      for(moveFront(sorted); (index(sorted) >= 0) && (strcmp(array[j],array[get(sorted)]) > 0); moveNext(sorted)){
         //navigation .. no breathing
      }
		//insert accordingly
      if (index(sorted) >= 0){
         insertBefore(sorted, j);
      }else{
         append(sorted, j);
      }
		//jump back after inserting
      moveFront(sorted);
   }



		//moveFront(list);




	for (int j = 0; j < lines; ++j) {
		fprintf(out,"%s \n", array[get(sorted)]);
		moveNext(sorted);
	}


}
