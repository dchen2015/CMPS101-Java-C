//Jason Chen

public class List {
	private class Node{
		Node next;
		Node prev;
		int data;
		
		Node(int Data, Node Next, Node Prev) {
			data = Data;
			next = Next;
			prev = Prev;
		}
		
		public String toString() {
			return String.valueOf(data);
		}
	}
	
	private Node front;
	private Node cursor;
	private Node back;
	private int index;
	private int length;
	
	List() {
		front = null;
		cursor = null;
		back = null;
		length = 0;
		index = -1;
	}
	
	int length() {// Returns the number of elements in this List.
		return length;
	}
	
	int index() {
		if (cursor != null) { // If cursor is defined, returns the index of the cursor element,
			return index;
		} else {	 // otherwise returns -1.
			return -1;
		}
	}

	int front() {// Returns front element. Pre: length()>0
		if (length > 0) {
			return front.data;
		} else {
			throw new RuntimeException("List is emplty");
		}
	}
	
	int back() {// Returns back element. Pre: length()>0
		if (length > 0) {
			return back.data;
		} else {
			throw new RuntimeException("List is emplty");
		}
	}
	
	int get() {// Returns cursor element. Pre: length()>0, index()>=0
		if(length < 1) {
			throw new RuntimeException("Invalid, List Class Error: cannot call get() on empty list");
		}
		if(index() < 0) {
			throw new RuntimeException("Invalid, List Class Error: cannot call get() with undefined index");
		}
		//otherwise return the cursor element
		return cursor.data;
	}
	
	boolean equals(List L) {
		Node temp = front;
		Node tempL = L.front;
		boolean equality = true;
		
		
		if(length == L.length) {// Returns true if and only if this List and L are the same
			while (equality && temp != null) {
				equality = (temp.data == tempL.data);
				temp = temp.next;
				tempL = tempL.next;
			}
			return equality;
		}
		return false;
	}
	
	void clear() {// Resets this List to its original empty state.
		front = null;
		cursor = null;
		back = null;
		length = 0;
		index = -1;
	}
	
	void moveFront() {// If List is non-empty, places the cursor under the front element,
		if (length > 0) {
			cursor = front;
			index = 0;
		}
	}
	 // otherwise does nothing.
	
	void moveBack() {// If List is non-empty, places the cursor under the back element,
		if (length > 0) {
			cursor = back;
			index = length -1;
		}
	}
	 // otherwise does nothing.
	
	void movePrev() {// If cursor is defined and not at front, moves cursor one step toward
		if (cursor != null) {
			if (index != 0) {
				cursor = cursor.prev;
				index --;
			} else {
				cursor = null;
				index = -1;
			}
		}
	}
	 // front of this List, if cursor is defined and at front, cursor becomes
	// undefined, if cursor is undefined does nothing.
	
	void moveNext() {// If cursor is defined and not at back, moves cursor one step toward
		if (cursor != null) {
			if (index != length - 1) {
				cursor = cursor.next;
				index ++;
			} else {
				cursor = null;
				index = -1;
			}
		}
	}
	 // back of this List, if cursor is defined and at back, cursor becomes
	// undefined, if cursor is undefined does nothing.
	
	void prepend(int data) {// Insert new element into this List. If List is non-empty,
		Node temp = new Node (data, front, null);
		if (front != null) {
			front.prev = temp;
		} else {
			back = temp;
		}
		front = temp;
		length ++;
	}
	
	void append(int data) {// Insert new element into this List. If List is non-empty,
		Node temp = new Node (data, null, back);
		if (back != null) {
			back.next = temp;
		} else {
			front = temp;
		}
		back = temp;
		length ++;
	}
	
	void insertBefore(int data) {// Insert new element before cursor.
	 // Pre: length()>0, index()>=0
		if (length > 0 && index >= 0) {
			Node temp = new Node (data, cursor, cursor.prev);
			if (cursor.prev != null) {
				cursor.prev.next = temp;
				cursor.prev = temp;
			} else {
				front = temp;
			}
		}
		length ++;
	}
	
	void insertAfter(int data) {// Inserts new element after cursor.
	// Pre: length()>0, index()>=0
		if (length > 0 && index >= 0) {
			Node temp = new Node (data, cursor.next, cursor);
			if (cursor.next != null) {
				cursor.next.prev = temp;
				cursor.next = temp;
			} else {
				back = temp;
			}
		}
		length ++;
	}

	void deleteFront()
	{
		if(length < 1)
		{
			throw new RuntimeException("Invalid, List Class Error: cannot call deleteFront() on empty list");
		}
		if(cursor == front)
		{
			cursor = null;
			index = -1;
		}
		front = front.next;
		front.prev = null;
		length--;
	}
	// Deletes the back element. Pre: length()>0
	void deleteBack()
	{
		if(length < 1)
		{
			throw new RuntimeException("Invalid, List Class Error: cannot call deleteBack() on empty list");
		}
		if(cursor == back)
		{
			cursor = null;
			index = -1;
		}
		back = back.prev;
		back.next = null;
		length--;
	}
	// Deletes cursor element, making cursor undefined.
	// Pre: length()>0, index()>=0
	void delete()
	{
		if(length < 1)
		{
			throw new RuntimeException("Invalid, List Class Error: cannot call delete() on empty list");
		}
		if(index() < 0)
		{
			throw new RuntimeException("Invalid, List Class Error: cannot call delete() with undefined index");
		}
		if(cursor == front)
		{
			deleteFront();
		}
		else if(cursor == back)
		{
			deleteBack();
		}
		else
		{
			cursor.prev.next = cursor.next;
			cursor.next.prev = cursor.prev;
			cursor = null;
			index = -1;
			length--;
		}
	}
	
	public String toString() {// Overrides Object's toString method. Returns a String
	 // representation of this List consisting of a space
	// separated sequence of integers, with front on left.
		Node temp = front;
		String str = new String();
		while (temp != null) {
			str = str + String.valueOf(temp.data) + " ";
			temp = temp.next;
		}
		return str;
	}
	
	List copy() {// Returns a new List representing the same integer sequence as this
	 // List. The cursor in the new list is undefined, regardless of the
	 // state of the cursor in this List. This List is unchanged.
		List copy = new List();
		Node temp = front;
		while (temp != null) {
			copy.append(temp.data);
			temp = temp.next;
		}
		return copy;
	}
}
